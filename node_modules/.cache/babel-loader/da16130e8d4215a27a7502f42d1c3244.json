{"ast":null,"code":"import { put, call, takeLatest } from \"redux-saga/effects\";\nimport { SEARCH_MOVIE_START, SEARCH_MOVIE_ERROR, SEARCH_MOVIE_COMPLETE } from \"../../consts/actionTypes\";\nimport { apiCall } from \"../api\";\nexport function* searchMovie({\n  payload\n}) {\n  try {\n    console.log(\"Accion inicial llamada sagas/search\");\n    const results = yield call(apiCall, `&s=${payload.movieName}`, null, null, \"GET\");\n    yield put({\n      type: SEARCH_MOVIE_COMPLETE,\n      results\n    });\n  } catch (error) {\n    yield put({\n      type: SEARCH_MOVIE_ERROR,\n      error\n    });\n  }\n}\nexport default function* search() {\n  yield takeLatest(SEARCH_MOVIE_START, searchMovie);\n}","map":{"version":3,"sources":["/Users/intelaki/Development/React/proyecto-react-hooks-en-udemy/src/redux/sagas/search.js"],"names":["put","call","takeLatest","SEARCH_MOVIE_START","SEARCH_MOVIE_ERROR","SEARCH_MOVIE_COMPLETE","apiCall","searchMovie","payload","console","log","results","movieName","type","error","search"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,QAAsC,oBAAtC;AACA,SACEC,kBADF,EAEEC,kBAFF,EAGEC,qBAHF,QAIO,0BAJP;AAKA,SAASC,OAAT,QAAwB,QAAxB;AAEA,OAAO,UAAUC,WAAV,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAmC;AACxC,MAAI;AACFC,IAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACA,UAAMC,OAAO,GAAG,MAAMV,IAAI,CACxBK,OADwB,EAEvB,MAAKE,OAAO,CAACI,SAAU,EAFA,EAGxB,IAHwB,EAIxB,IAJwB,EAKxB,KALwB,CAA1B;AAOA,UAAMZ,GAAG,CAAC;AAAEa,MAAAA,IAAI,EAAER,qBAAR;AAA+BM,MAAAA;AAA/B,KAAD,CAAT;AACD,GAVD,CAUE,OAAOG,KAAP,EAAc;AACd,UAAMd,GAAG,CAAC;AAAEa,MAAAA,IAAI,EAAET,kBAAR;AAA4BU,MAAAA;AAA5B,KAAD,CAAT;AACD;AACF;AAED,eAAe,UAAUC,MAAV,GAAmB;AAChC,QAAMb,UAAU,CAACC,kBAAD,EAAqBI,WAArB,CAAhB;AACD","sourcesContent":["import { put, call, takeLatest } from \"redux-saga/effects\";\nimport {\n  SEARCH_MOVIE_START,\n  SEARCH_MOVIE_ERROR,\n  SEARCH_MOVIE_COMPLETE,\n} from \"../../consts/actionTypes\";\nimport { apiCall } from \"../api\";\n\nexport function* searchMovie({ payload }) {\n  try {\n    console.log(\"Accion inicial llamada sagas/search\");\n    const results = yield call(\n      apiCall,\n      `&s=${payload.movieName}`,\n      null,\n      null,\n      \"GET\"\n    );\n    yield put({ type: SEARCH_MOVIE_COMPLETE, results });\n  } catch (error) {\n    yield put({ type: SEARCH_MOVIE_ERROR, error });\n  }\n}\n\nexport default function* search() {\n  yield takeLatest(SEARCH_MOVIE_START, searchMovie);\n}\n"]},"metadata":{},"sourceType":"module"}